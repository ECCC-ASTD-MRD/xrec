*/* RMNLIB - Library of useful routines for C and FORTRAN programming
* * Copyright (C) 1975-2001  Division de Recherche en Prevision Numerique
* *                          Environnement Canada
* *
* * This library is free software; you can redistribute it and/or
* * modify it under the terms of the GNU Lesser General Public
* * License as published by the Free Software Foundation,
* * version 2.1 of the License.
* *
* * This library is distributed in the hope that it will be useful,
* * but WITHOUT ANY WARRANTY; without even the implied warranty of
* * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* * Lesser General Public License for more details.
* *
* * You should have received a copy of the GNU Lesser General Public
* * License along with this library; if not, write to the
* * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
* * Boston, MA 02111-1307, USA.
* */
      SUBROUTINE XKURV2S (T,XS,YS,N,X,Y,XP,YP,S,SIGMA,NSLPSW,SLP)
*
*
*
* DIMENSION OF           X(N),Y(N),XP(N),YP(N)
* ARGUMENTS
*
* LATEST REVISION        OCTOBER 22, 1973
*
* PURPOSE                KURV2S PERFORMS THE MAPPING OF POINTS IN THE
*                        INTERVAL (0.,1.) ONTO A CURVE IN THE PLANE.
*                        THE SUBROUTINE KURV1S SHOULD BE CALLED EARLIER
*                        TO DETERMINE CERTAIN NECESSARY PARAMETERS.
*                        THE RESULTING CURVE HAS A PARAMETRIC
*                        REPRESENTATION BOTH OF WHOSE COMPONENTS ARE
*                        SPLINES UNDER TENSION AND FUNCTIONS OF THE
*                        POLYGONAL ARCLENGTH PARAMETER.
*
* ACCESS CARDS           *FORTRAN,S=ULIB,N=KURV
*                        *COSY
*
* USAGE                  CALL KURV2S (T,XS,YS,N,X,Y,XP,YP,S,SIGMA)
*
* ARGUMENTS
*
* ON INPUT               T
*                          CONTAINS A REAL VALUE OF ABSOLUTE VALUE LESS
*                          THAN OR EQUAL TO 1. TO BE MAPPED TO A POINT
*                          ON THE CURVE.  THE SIGN OF T IS IGNORED AND
*                          THE INTERVAL (0.,1.) IS MAPPED ONTO THE
*                          ENTIRE CURVE.  IF T IS NEGATIVE, THIS
*                          INDICATES THAT THE SUBROUTINE HAS BEEN CALLED
*                          PREVIOUSLY (WITH ALL OTHER INPUT VARIABLES
*                          UNALTERED) AND THAT THIS VALUE OF T EXCEEDS
*                          THE PREVIOUS VALUE IN ABSOLUTE VALUE.  WITH
*                          SUCH INFORMATION THE SUBROUTINE IS ABLE TO
*                          MAP THE POINT MUCH MORE RAPIDLY.  THUS IF THE
*                          USER SEEKS TO MAP A SEQUENCE OF POINTS ONTO
*                          THE SAME CURVE, EFFICIENCY IS GAINED BY
*                          ORDERING THE VALUES INCREASING IN MAGNITUDE
*                          AND SETTING THE SIGNS OF ALL BUT THE FIRST
*                          NEGATIVE.
*
*                        N
*                          CONTAINS THE NUMBER OF POINTS WHICH WERE
*                          INTERPOLATED TO DETERMINE THE CURVE.
*
*                        X AND Y
*                          ARRAYS CONTAINING THE X- AND Y-COORDINATES
*                          OF THE INTERPOLATED POINTS.
*
*                        XP AND YP
*                          ARE THE ARRAYS OUTPUT FROM KURV1 CONTAINING
*                          CURVATURE INFORMATION.
*
*                        S
*                          CONTAINS THE POLYGONAL ARCLENGTH OF THE
*                          CURVE.
*
*                        SIGMA
*                          CONTAINS THE TENSION FACTOR (ITS SIGN IS
*                          IGNORED).
*
*                        NSLPSW
*                          IS AN INTEGER SWITCH WHICH TURNS ON OR OFF
*                          THE CALCULATION OF SLP
*                          NSLPSW
*                                 = 0 INDICATES THAT SLP WILL NOT BE
*                                     CALCULATED
*                                 = 1 SLP WILL BE CALCULATED
*
*                        THE PARAMETERS N, X, Y, XP, YP, S AND SIGMA
*                        SHOULD BE INPUT UNALTERED FROM THE OUTPUT OF
*                        KURV1S.
*
* ON OUTPUT              XS AND YS
*                          CONTAIN THE X- AND Y-COORDINATES OF THE IMAGE
*                          POINT ON THE CURVE.
*
*                        SLP
*                          CONTAINS THE SLOPE OF THE CURVE IN DEGREES AT
*                          THIS POINT.
*
*                        T, N, X, Y, XP, YP, S AND SIGMA ARE UNALTERED.
*
* ENTRY POINTS           KURV2S
*
* SPECIAL CONDITIONS     NONE
*
* COMMON BLOCKS          NONE
*
* I/O                    NONE
*
* PRECISION              SINGLE
*
* REQUIRED ULIB          NONE
* ROUTINES
*
* SPECIALIST             RUSSELL K. REW, NCAR, BOULDER, COLORADO  80302
*
* LANGUAGE               FORTRAN
*
* HISTORY                ORIGINALLY WRITTEN BY A. K. CLINE, MARCH 1972.
*
*
*
*
      INTEGER         N
      REAL            T          ,XS         ,YS         ,X(N)       ,
     1                Y(N)       ,XP(N)      ,YP(N)      ,S          ,
     2                SIGMA      ,SLP
*
#if defined (SUN) || defined (SGI) || defined (NEC)
      SAVE
#endif
      DATA PI /3.1415926535897932/
*
*
* DENORMALIZE SIGMA
*
      SIGMAP = ABS(SIGMA)*FLOAT(N-1)/S
*
* STRETCH UNIT INTERVAL INTO ARCLENGTH DISTANCE
*
      TN = ABS(T*S)
*
* FOR NEGATIVE T START SEARCH WHERE PREVIOUSLY TERMINATED,
* OTHERWISE START FROM BEGINNING
*
      IF (T .LT. 0.) GO TO 10
      DEGRAD = PI/180.
      I1 = 2
      XS = X(1)
      YS = Y(1)
      SUM = 0.
      IF (T .LT. 0.) RETURN
*
* DETERMINE INTO WHICH SEGMENT TN IS MAPPED
*
   10 DO 30 I=I1,N
         DELX = X(I)-X(I-1)
         DELY = Y(I)-Y(I-1)
         DELS = SQRT(DELX*DELX+DELY*DELY)
         IF (SUM+DELS-TN) 20,40,40
   20    SUM = SUM+DELS
   30 CONTINUE
*
* IF ABS(T) IS GREATER THAN 1., RETURN TERMINAL POINT ON
* CURVE
*
      XS = X(N)
      YS = Y(N)
      RETURN
*
* SET UP AND PERFORM INTERPOLATION
*
   40 DEL1 = TN-SUM
      DEL2 = DELS-DEL1
      EXPS1 = EXP(SIGMAP*DEL1)
      SINHD1 = .5*(EXPS1-1./EXPS1)
      EXPS2 = EXP(SIGMAP*DEL2)
      SINHD2 = .5*(EXPS2-1./EXPS2)
      EXPS = EXPS1*EXPS2
      SINHS = .5*(EXPS-1./EXPS)
      XS = (XP(I)*SINHD1+XP(I-1)*SINHD2)/SINHS+
     1     ((X(I)-XP(I))*DEL1+(X(I-1)-XP(I-1))*DEL2)/DELS
      YS = (YP(I)*SINHD1+YP(I-1)*SINHD2)/SINHS+
     1     ((Y(I)-YP(I))*DEL1+(Y(I-1)-YP(I-1))*DEL2)/DELS
      I1 = I
      IF (NSLPSW .EQ. 0) RETURN
      COSHD1 = .5*(EXPS1+1./EXPS1)*SIGMAP
      COSHD2 = .5*(EXPS2+1./EXPS2)*SIGMAP
      XT = (XP(I)*COSHD1-XP(I-1)*COSHD2)/SINHS+
     1     ((X(I)-XP(I))-(X(I-1)-XP(I-1)))/DELS
      YT = (YP(I)*COSHD1-YP(I-1)*COSHD2)/SINHS+
     1     ((Y(I)-YP(I))-(Y(I-1)-YP(I-1)))/DELS
      SLP = ATAN2(YT,XT)/DEGRAD
      RETURN
      END

*/* RMNLIB - Library of useful routines for C and FORTRAN programming
* * Copyright (C) 1975-2001  Division de Recherche en Prevision Numerique
* *                          Environnement Canada
* *
* * This library is free software; you can redistribute it and/or
* * modify it under the terms of the GNU Lesser General Public
* * License as published by the Free Software Foundation,
* * version 2.1 of the License.
* *
* * This library is distributed in the hope that it will be useful,
* * but WITHOUT ANY WARRANTY; without even the implied warranty of
* * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* * Lesser General Public License for more details.
* *
* * You should have received a copy of the GNU Lesser General Public
* * License along with this library; if not, write to the
* * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
* * Boston, MA 02111-1307, USA.
* */
***s/p  xgridal    trace le fond specifie et annote les axes si desire
*
      subroutine xgridal (imajx,iminx,imajy,iminy,ixlab,iylab,iflg,x,
     %y)
*
*
*auteur   systeme ncar
*
*revision 001  rpn  m.valin / c.thibeault  1-7-78  refait documentation
*
*langage  fortran
*
*objet(gridal)
*         gridal sert de point d'entree a plusieurs routines (grid-
*         periml-halfax) et permet de tracer le genre de fond specifie
*         par l'usager et aussi d'annoter les axes si desire.
*
*directives(gridal)
*
*librairies
*         source  newplot106pl,id=cmculib        deck=gridal
*         objet   ncarsysob,id=cmculib
*
*
*arguments
*         imajx   pour un axe lineaire, imajx est le nombre de division
*                 majeures sur l'axe des x.  par divisions on veut dire
*                 les trous et non le nombre de lignes
*                 pour un papier logarithmique imajx = 1, c'est-a-dire
*                 une division majeure pour chaque cycle.  si imajx
*                 n'est pas = 1 les divisions majeures ne sont pas
*                 ecrites.
*         iminx   pour un axe lineaire, iminx est le nombre de division
*                 mineures a chaque division majeure et les divisions
*                 sont aussi les trous et non les lignes.
*                 pour un axe logarithmique si iminx est <= 10 et
*                 imajx .eq. 1 les huit divisions normales du cycle
*                 vont etre tracees.  si iminx est .gt. 10 ou si imajx
*                 n'est pas .eq. 1 ces sub-divisions seront supprimees.
*         imajy   pour un axe lineaire, imajy est le nombre de division
*                 majeures sur l'axe des y.  par divisions on veut dire
*                 les trous et non le nombre de lignes
*                 pour un papier logarithmique imajy = 1, c'est-a-dire
*                 une division majeure pour chaque cycle.  si imajy
*                 n'est pas = 1 les divisions majeures ne sont pas
*                 ecrites.
*         iminy   pour un axe lineaire, iminy est le nombre de division
*                 mineures a chaque division majeure et les divisions
*                 sont aussi les trous et non les lignes.
*                 pour un axe logarithmique si iminy est <= 10 et
*                 imajy .eq. 1 les huit divisions normales du cycle
*                 vont etre tracees.  si iminy est .gt. 10 ou si imajy
*                 n'est pas .eq. 1 ces sub-divisions seront supprimees.
*         ixlab   indicateur pour les titre et le perimetre sur l'axe x
*                  = -1  axe-x  pas trace
*                        axe-x  pas numerote
*                  =  0  axe-x  trace
*                        axe-x  pas numerote
*                  =  1  axe-x  trace
*                        axe-x  numerote
*         iylab   indicateur pour les titre et le perimetre sur l'axe y
*                  = -1  axe-y  pas trace
*                        axe-y  pas numerote
*                  =  0  axe-y  trace
*                        axe-y  pas numerote
*                  =  1  axe-y  trace
*                        axe-y  numerote
*         iflg    indicateur pour le genre de fond
*                           axe-x      axe-y
*                 iflg       fond       fond
*                 ----      -----      -----
*                   0       grid       grid
*                   1       grid       perim
*                   2       grid       halfax
*                   4       perim      grid
*                   5       perim      perim
*                   6       perim      halfax
*                   8       halfax     grid
*                   9       halfax     perim
*                   10      halfax     halfax
*                 si iflg = 10, le point d'intersection des axes sera l
*                 point gauche en bas du domaine specifie par l'appel a
*                 set.
*         x  y    coordonnees du point d'intersection des axes si
*                 iflg = 10.
*
*implicites
*         bloc /syspl1/  ***** pour une explication des arguments dans
*                              le bloc common syspl1 voir la routine
*                              sysdat *****
*
*modules  trans,optn,justfy,pwrit
*
*precision
*         simple
*
*
*----------------------------------------------------------------------
*
*
*
*     version decomprimee de gridal
*

*     implicit none
*     implicit none laisse a off volontairement

      integer savunit,segunit,segsavu,pipeflg
      logical mtclos,flclos,savclos,segclos,ssclos,pasdef
*

      common /xsyspl1/ mmajx   ,mmajy   ,mminx   ,mminy
      common /xsyspl1/ mxlab   ,mylab   ,mflg   ,mtype
      common /xsyspl1/ mxa   ,mya   ,mxb   ,myb
      common /xsyspl1/ mx   ,my   ,mtypex   ,mtypey
      common /xsyspl1/ xxa   ,yya   ,xxb   ,yyb
      common /xsyspl1/ xxc   ,yyc   ,xxd   ,yyd
      common /xsyspl1/ xfactr   ,yfactr   ,xadd   ,yadd
      common /xsyspl1/ mumx   ,mumy   ,msizx   ,msizy
      common /xsyspl1/ mxdec   ,mydec   ,mxor   ,mop(30,-1:32)
      common /xsyspl1/ mxold   ,myold   ,mxmax   ,pasdef(30)
      common /xsyspl1/ mymax   ,mxfac   ,myfac   ,modef
      common /xsyspl1/ mf2er   ,mshftx   ,mshfty
      common /xsyspl1/ mmgrx   ,mmgry   ,mmnrx   ,mmnry
      common /xsyspl1/ mfrcnt   ,mjxmin   ,mjymin   ,mjxmax
      common /xsyspl1/ mjymax   ,small   ,xx   ,yy
      common /xsyspl1/ ivar   ,imunit   ,ipunit
      common /xsyspl1/ nbits   ,index   ,mbuf(90)
      common /xsyspl1/ iwide(0:3) ,iwcur   ,pipeflg
      common /xsyspl1/ iflshnt   ,iwcurf   ,iwcurs   ,savunit
      common /xsyspl1/ mtclos   ,flclos   ,savclos   ,segclos
      common /xsyspl1/ iwcseg   ,segunit   ,ssclos   ,segsavu
      integer moprin(30)
      equivalence (moprin(1), mop(1,-1))
      common /xsyspl2/ mfmt(2)
      character *(20) mfmt
      integer   nmaj(2)  ,nmin(2)  ,nlab(2)  ,nflg(2),num(2)   ,iz(2
     %),iza(2)   ,izb(2)   ,imz(2)   ,izdec(2),isiz(2)  ,imajl(2) ,
     %iminl(2) ,itype(2),kz(2)   ,izbb(2)  ,i0shft(2) ,izaa(2)
      real   zza(2)   ,zzb(2)   ,zzc(2)   ,zzd(2),zz(2)
*

      equivalence   (xxa,zza(1))   ,(xxb,zzb(1)),(xxc,zzc(1))   ,(
     %xxd,zzd(1)),(mx,iz(1)),(mxa,iza(1))   ,(mxb,izb(1)),(majx,nmaj
     %(1))   ,(minx,nmin(1)),(mumx,num(1))   ,(mxdec,izdec(1)),(
     %msizx,isiz(1))   ,(mmgrx,imajl(1)),(mmnrx,iminl(1))   ,(mtypex
     %,itype(1)),(xx,kz(1)) ,(xx,zz(1)) ,(mshftx,i0shft(1))
*
*
      character *40 iyyy,ichars
*
*----------------------------------------------------------------------
*
*     prepare les variables pour la boucle
*
*
      external  wglgmod
      integer wglgmod
      
      call wglgsp(xxc, yyc, xxd, yyd, mxa, mya, mxb, myb)

      nmaj(1) = imajx
      nmaj(2) = imajy
      nmin(1) = iminx
      nmin(2) = iminy
      nlab(1) = ixlab
      nlab(2) = iylab
      nflg(1)=ishft(iflg,-(2))-1
      nflg(2)=iand(iflg,3)-1
      izaa(1) = iza(1)
      izaa(2) = iza(2)

      if( (nflg(1).gt.0 .or. nflg(2).gt.0))then
	 call wglxai(mx, my, x, y)

         if( (nflg(2) .gt. 0))then
            izaa(1) = mx
         endif 
         if( (nflg(1) .gt. 0))then
            izaa(2) = my
         endif 
         if( (nflg(2) .gt. 0))then
            izbb(1) = mx
         endif 
         if( (nflg(1) .gt. 0))then
            izbb(2) = my
         endif 

*
*---------------------------------------------------------------------
*
*     i=1  pour l'axe x avec trait dans la direction y
*     i=2  pour l'axe y avec trait dans la direction x
*
      endif 
      do 23010   i=1,2
	 itype(i) = wglgmod()
	 if (i.eq.1) then
            itype(i) = (itype(i)-1) / 2
         else
            itype(i) = mod(itype(i)+1,2)
	 endif
         if( (nlab(i).ge.0))then

*
*     ior<>0  possible pour x seulement
*
            ixor = (2-i)*90*mxor
            imaj = max0(nmaj(i),1)
            imin = max0(nmin(i),1)
            begin = iza(i)
            biginc = float(izb(i)-iza(i))/float(imaj)
            smlinc = biginc/float(imin)
            start = zzc(i)
            dif = (zzd(i)-zzc(i))/float(imaj)
            iop = 3-i
*
*     op est l'axe oppose a i
*

            idec = izdec(iop)
            if( (idec.eq. 0.and.nflg(i).le.0))then
               idec = iza(iop)-izb(iop)-20
            endif 
            if( (idec.eq.0.and.nflg(i).gt.0))then
               idec = -20
            endif 
            if( (ixor.ne. i-1))then

*
*     les titres et les axes sont orthogonals
*
               icent = 4
               if( (idec.le. 0))then
                  icent = 2
               endif 
            else 

*
*     les titres et les axes sont paralleles
*
               icent = 1
            endif 
            if( (itype(i).ne. 0))then
               fact = 10.
               if( (zzc(i) .gt. zzd(i)))then
                  fact = 1./fact
               endif 
               val = zzc(i)/fact
               delval = val
               if( (imin.le.10 .and. imaj.eq.1))then
                  imin = 9
               endif 
               if( (imin.ne. 9))then
                  imin = 1
               endif 
               imaj = abs(alog10(zzd(i)/zzc(i)))+1.0001
            endif 
            imajp1 = imaj+1
            iminm1 = imin-1
            do 23030   j=1,imajp1
               part = j-1
*
*---------------------------------------------------------------------
*
*     trace les lignes majeures ou les traits
*

               call xoptn(3HTHI,2)
               iz(i) = begin+part*biginc
               if( (itype(i).ne. 0))then
                  val = val*fact
                  zz(i) = val
                  kz(iop) = 1
                  delval = delval*fact
                  if( (iz(i)-10.gt. izb(i)))then
                     goto 23031
                  endif 
               endif 
               iz(iop) = izaa(iop)

		call xfrstd(mx, my)
               if( (nflg(i).lt.0))then
                  iz(iop) = izb(iop)
	          call xvectd(mx,my)
               else 
                  iz(iop) = izaa(iop)+imajl(iop)
	          call xvectd(mx, my)
                  if( (nflg(i).le.0))then
                     iz(iop) = izb(iop)

        	     call xfrstd(mx, my)
	             iz(iop) = izb(iop)-imajl(iop)

                     call xvectd(mx, my)
                  endif 

*
*------------------------------------------------------------------------
*
*        si besoin, prepare le titre
*
               endif 
               if( (nlab(i).gt. 0))then
                  if( (itype(i) .eq. 0))then
                     val = start+part*dif
                  endif 
                  ixxx=num(i)
                  write(ichars,mfmt(i))val
                  imz(i)=(iz(i))
                  imz(iop)=(izaa(iop))
                  imz(iop)=max0(1,imz(iop))
                  njust = num(i)
                  if( (icent .eq. 1))then
                     call xjustfy (ichars,num(i),njust)
                  endif 
		  if (i.eq.1) then
		      imz(2) = imz(2) - isiz(i)
	          endif
                  call xoptn(3HTHI,1)
                  call xpwrit (imz(1),imz(2),ichars,njust,isiz(i),
     %            ixor,icent)

*
*------------------------------------------------------------------------
*
*        trace les lignes mineures
*
               endif 
               if( (iminm1.ge.0 .and. j.ne.imajp1))then
                  call xoptn(3HTHI,1)

                  do 23048   k=1,iminm1
                     iz(i) = begin+part*biginc+float(k)*smlinc
                     if ((itype(i).ne. 0))then
                        zz(i) = val+float(k)*delval

                        if( (zzc(i) .gt. zzd(i)))then
                           zz(i) = val-float(k)*delval*.1
                        endif 

	                if (i.eq.1) then
                           call wglxai(mx, my, zz(1),yyc)
    	                else
                           call wglxai(mx, my, xxc,zz(2))
	                endif

                        kz(iop) = 1
                        if( (iz(i) .gt. izb(i)))then
                           goto 1000
                        endif 
                        if( (iz(i) .lt. iza(i)))then
                           goto 23048
                        endif 
                     endif 
                     iz(iop) = izaa(iop)
 	
                     call xfrstd(mx, my)
                     if( (nflg(i).lt.0))then
                        iz(iop) = izb(iop)
	                call xvectd(mx, my)
                     else 
                        iz(iop) = izaa(iop)+iminl(iop)
                        call xvectd(mx, my)
                        if( (nflg(i).le.0))then
                           iz(iop) = izb(iop)
	                   call xfrstd(mx, my)
                           iz(iop) = izb(iop)-iminl(iop)
	                   call xvectd(mx, my)
                        endif 
                     endif 
23048             continue 
               endif 
23030       continue 
23031       continue 
1000        continue
            if( (nflg(iop).ge. 0))then

*
*------------------------------------------------------------------------
*
*        trace les axes

*
               call xoptn(3HTHI,2)
               iz(i) = iza(i)
               iz(iop) = izaa(iop)

	call xfrstd(mx, my)
               iz(i) = izb(i)
               iz(iop) = izaa(iop)
	call xvectd(mx, my)
	               if( (nflg(i).le. 0))then
                  iz(i) = iza(i)
                  iz(iop) = izb(iop)

	call xfrstd(mx, my)
                  iz(i) = izb(i)
                  iz(iop) = izb(iop)

	call xvectd(mx, my)
               endif 
            endif 
         endif 
23010 continue 
      call xoptn(3HTHI,1)
*

      return
      end


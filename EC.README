# VERSION xrec 5.11.0

Installing and running xrec on a stick - Version 5.11.0
Environment and Climate Change Canada

1) load compiler

#G COMPILER 5.1.0
# Load G compiler and libraries
. r.load.dot /ssm/net/hpcs/compilers/gcc-5.1.0/gcc_5.1.0_ubuntu-14.04-amd64-64
. ssmuse-sh -p /ssm/net/hpcs/201402/master/openmpi_1.6.5_ubuntu-12.04-amd64-64

#INTEL COMPILER 2016
#EC workstation
# Load INTEL compiler and libraries
# default version of Intel compiler used: 19.
# to use version 13, change the link in the sources directory:
# cd xrec_on_a_stick_[version]/sources
# rm Linux-x86_64-intel.cmake
# ln -s Linux-x86_64-intel.cmake.16 Linux-x86_64-intel.cmake
# changes to the C and Fortran flags can be done in the Linux-x86_64-intel.cmake
. r.load.dot /ssm/net/hpcs/201402/04/base /ssm/net/hpcs/exp/intel2016/01

#eccc-ppp* 
INTEL:
. ssmuse-sh -x main/opt/intelcomp/intelcomp-2016.1.156
. ssmuse-sh -x main/opt/openmpi/openmpi-1.6.5/intelcomp-2016.1.156

#INTEL COMPILER 2019
#hpcr1-in
#hpcr2-in
#rutherford
. r.load.dot /fs/ssm/hpco/exp/intelpsxe-cluster-19.0.3.199 rpn/base/01.0
. r.load.dot /fs/ssm/hpco/exp/openmpi/openmpi-3.1.2--hpcx-2.2.0--ofed-4.4.2--intel-2019.0.045

#PGI COMPILER 17.10 on lorentz
# Load PGI compiler and libraries
PGI=/local/raid/armn/CUDA/PGI/pgi; export PGI
MANPATH=$MANPATH:$PGI/linux86-64/17.10/man; export MANPATH
LM_LICENSE_FILE=$PGI/license.dat; export LM_LICENSE_FILE
PATH=$PGI/linux86-64/17.10/bin:$PATH; export PATH
export LD_LIBRARY_PATH=$PGI/linux86-64/17.10/lib:$LD_LIBRARY_PATH
export PATH=$PGI/linux86-64/17.10/mpi/openmpi/bin:$PATH
export MANPATH=$MANPATH:$PGI/linux86-64/17.10/mpi/openmpi/man

#PGI COMPILER 18.4 on einstein
cd xrec_on_a_stick_5.11.0/sources
rm Linux-x86_64-pgi.cmake
ln -s Linux-x86_64-pgi.cmake_18.4 Linux-x86_64-pgi.cmake
export MODULEPATH=$MODULEPATH:/opt/pgi/modulefiles
module load PrgEnv-pgi/18.4

2) build XREC

cd xrec_on_a_stick_[version]/sources
#default compiler: gfortran
#if you want to compile with another compiler:
#modify sources/CMakelists.txt for desired compiler (line 9)
#make sure link of Linux*.cmake matches right compiler version
#eg: ln -s Linux-x86_64-intel.cmake.16 Linux-x86_64-intel.cmake
mkdir -p build
cd build
cmake ..

#instead, you could also use the following option to select the compiler you wish to use:
cmake -DCOMPILER=intel ..
or
cmake -DCOMPILER=pgi ..

#if compiler or compile options are not right:
# make appropriate changes to the cmake file named according to the Fortran
# compiler you are using, in the sources directory, for example:
# Linux-x86_64-gfortran.cmake if you compile with gfortran or
# Linux-x86_64-intel.cmake if you compile with Intel

\rm -rf build/*

cmake ..
  or, if you used that command:
cmake -DCOMPILER=intel ..
  or
cmake -DCOMPILER=pgi ..

make -j
make install

#binaries built are: xrec 
a directory named after the EC environment variable $BASE_ARCH (and the
compiler you used (for example: bin-Linux_x86-64-intel-16.0.1.150) is created in
the work directory of xrec, and a binary named xrec is installed in it.

3) run xrec
cd xrec_on_a_stick_[version]/work/bin-[BASE_ARCH-COMPILER-NAME]
#ARMNLIB variable is usually defined under ECCC environment
#you shouldn't have to export it
export ARMNLIB=$PWD/../armnlib
./xrec -imflds [rpn_std_file]

User guide in pdf format describes how to use XREC in more details.

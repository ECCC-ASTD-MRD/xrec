*/* RMNLIB - Library of useful routines for C and FORTRAN programming
* * Copyright (C) 1975-2001  Division de Recherche en Prevision Numerique
* *                          Environnement Canada
* *
* * This library is free software; you can redistribute it and/or
* * modify it under the terms of the GNU Lesser General Public
* * License as published by the Free Software Foundation,
* * version 2.1 of the License.
* *
* * This library is distributed in the hope that it will be useful,
* * but WITHOUT ANY WARRANTY; without even the implied warranty of
* * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* * Lesser General Public License for more details.
* *
* * You should have received a copy of the GNU Lesser General Public
* * License along with this library; if not, write to the
* * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
* * Boston, MA 02111-1307, USA.
* */
      program xrec
      implicit none

      integer maxrecs,maxfich,newfld,ouvrir,fermer,quitter
      parameter (maxrecs= 128)
      parameter (maxfich= 124)

      parameter (newfld = 4)
      parameter (ouvrir = 1)
      parameter (fermer = 2)
      parameter (quitter = -1)

      integer xfslfer97
      integer fstouv, fclos, fstfrm, indfich, lenfich, fstopl

      integer nf, oldnf

      integer xconouv, xinit
      integer xfslouv97, xfslact97
      integer xconact, xpandact, xpancact, xpaneact, xpangact, 
     $     xpanmact ,xpanpaact, xpanpcsac, xpanpact, xpanpavact, 
     $     xpanpcpact ,xpanpcsact, xpventact, xpattact


      integer ier, nrecs
      integer i, inf, lnguser, getulng
      integer fnom, fstopi, ezsetopt
      external fnom, fstopi, ezsetopt
      
      character*512   nomfich
      character*512     vide
      integer        recs(maxrecs)
      integer        nbrecs
      integer lnkdiun(maxfich)

      integer nbfich
      integer ipos
      integer typesel

      integer longueur
      external longueur

      integer indmin, indmax, level
      
      character * 8   cle(132)
      character * 512 def(132), val(132)
      character * 512 nfich(maxfich)
      character*128 tmpdir,sortiexrec
      character*512 temporaire
      

      character*16 ezopt,ezval

      common /ccardprm/ cle, def, val
      logical flag
*
      data vide/' '/
      data cle /124 * 'IMFLDS:', 'AR',     'OZSRT.', 
     *          'COLMIN', 'COLMAX', 'V', 'DEBUG', 'NOLOGO', 'ROC'/
      data def /124 * 'SCRAP',  'SQUARE', 'CHAMP_EDITE',
     *          '64',     '248', 'OUI', 'OUI','OUI','OUI'/
      data val /124 * 'SCRAP',  'SQUARE', 'CHAMP_EDITE',
     *          '64',     '248', 'NON', 'NON','NON','NON'/

*

      data lnkdiun / 1,   2,  3,  4,          7,  8,  9, 10,
     $               11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
     $               21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
     $               31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
     $               41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
     $               51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
     $               61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
     $               71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
     $               81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
     $              101,102,103,104,105,106,107,108,109,110,
     $              111,112,113,114,115,116,117,118,119,120,
     $              121,122,123,124,125,126,127,128,129,130,
     $              131,132,133,134,135,136 /


      call qqqnocore
      call wglscon('x')
      ezopt = 'EXTRAP_DEGREE'
      ezval = 'MAXIMUM'
      ier = ezsetopt(ezopt,ezval)
      ier = xinit('xrec')
      lnguser = getulng()
      if (lnguser.eq.0) then
         nomfich = 'Selecteur d''enregistrements'
         def(126) = 'champ_edite'
         val(126) = 'champ_edite'
      else
         nomfich = 'Record Selector'
         def(126) = 'modified_field'
         val(126) = 'modified_field'
      endif

      call ccard(cle,def,val, 132, ipos)

      nf = 1
      if (val(1).eq.def(1)) then
         call selfic(val, 124, 512, nf)
      endif

      if (nf.eq.0.or.val(1).eq.vide) then
         print *, 'Aucun fichier demande - No files selected'
         print *, 'Bonne chance - Good Luck'
         stop
      endif
      
      ier = fstopl('REDUCTION32',.true.,.false.)
      call recopnf(nbrecs, val, def, lnkdiun, nf)

      if (val(129).eq.'NON') then
         call getenv('TMPDIR',tmpdir)
         sortiexrec = '/sortie-xrec.txt'
         temporaire = tmpdir(1:longueur(tmpdir)) // sortiexrec
         ier = fnom(6, temporaire,'SEQ+FTN+FMT',0)
         if (ier.ne.0) then
            print *, 'Cannot write into temporary file : ', temporaire
         endif
         level = 10
         flag = .false.
         ier = fstopi('MSGLVL', level, flag)
      else
         ier = ezsetopt('VERBOSE', 'YES')
      endif

      if (val(130).eq.'OUI') then
         call wgldbg
      endif

      if (val(131).eq.'OUI') then
         call recnologo
      endif

      if (val(132).eq.'OUI') then
         call wglroc
      endif

      read(val(127),*) indmin
      read(val(128),*) indmax

*     call rgopti('INTERP', 1, .true.)
      ezopt = 'INTERP_DEGREE'
      ezval = 'LINEAR'
      ier = ezsetopt(ezopt, ezval)
      call setcolors(indmin,indmax)

      call recckar(lnkdiun(1), val(125))
      
      inf = xconouv(lnkdiun(1))
      typesel = 2
      ier = xfslouv97(nomfich, lnkdiun(1), nbrecs, 1, typesel)

      nrecs = 0
 1000 inf = xconact(recs, nrecs, lnkdiun(1))

      if (inf.eq.ouvrir) then
         oldnf = nf
         call allpdown
         call selfic(val(oldnf+1), 124-oldnf, 512, nf)
         call allpup
         if (nf.eq.0)  then
            nf=oldnf
         else
            nf = oldnf+nf
            call recclsf(lnkdiun, oldnf)
            if (nf.gt.maxfich) then
               print *, 'Trop de fichiers ouverts'
               stop
            endif
            call recopnf(nbrecs, val, def, lnkdiun, nf)
            call xfslupd97(val(1), lnkdiun(1), nbrecs, 1, typesel)
         endif
      endif
      
      if (inf.eq.fermer) then
         oldnf = nf
         call allpdown
         call xfcl(val, nf)
         call allpup
         if (nf.ne.oldnf) then
            call recclsf(lnkdiun, oldnf)
            do 200 i=nf+1,oldnf
 200           val(i) = def(i)


         call recopnf(nbrecs, val, def, lnkdiun, nf)
         call xfslupd97(val(1), lnkdiun(1), nbrecs, 1, typesel)
         endif   
      endif

      if (inf.eq.quitter) goto 3000

      ier = xfslact97(recs, nrecs, 1)
      ier = xpandact()
      ier = xpancact()
      ier = xpaneact()
      ier = xpangact()
      ier = xpanmact()
      ier = xpanpaact()
      ier = xpanpcsact()
      ier = xpanpact()
      ier = xpanpavact()
      ier = xpanpcpact()
      ier = xpanpcsact()
      ier = xpventact()
      ier = xpattact()
      goto 1000

 2    format(72a)
 4    format(3i16)
 6    format(72a)
 3000 print *, 'fin d execution normale'
      stop
      end

c     ****************************************************************
c     **                                                            **
c     ****************************************************************


      subroutine recopnf(nbrecs, val, def, lnkdiun, nf)
      implicit none
      integer nbrecs
      character*512 val(*), def(*)
      integer tol
      integer lnkdiun(*)
      integer nf

      integer i, ier, niun, nrecs
      integer, dimension(:), allocatable :: liste
      integer fnom, fstouv, fstinl
      integer ni, nj, nk, fstopi
      external fnom, fstouv, fstinl, fstopi
      logical flag
       

      if (nf.eq.0) then
         nbrecs = 0
         return
      endif

      nf = 1
 33   if (val(nf).ne.def(nf)) then
         nf = nf +1
         goto 33
      endif
         
      nf = nf -1
      do 34 i=1, nf
         ier = fnom(lnkdiun(i),val(i),'STD+RND+OLD+R/O+REMOTE',0)
         if (ier.lt. 0) then
            call messerr(val(i))
            print *, '***********************************************'
            print *, 'rec - fichier ',val(1),' inexistant - au revoir'
            print *, '************************************************'
            stop
         endif
 34   continue

      tol = 10
      flag = .false.
      ier = fstopi('TOLRNC', tol, flag)
      nrecs = 0
      nbrecs = 0
      do i=1,nf
         nrecs = fstouv(lnkdiun(i), 'RND')
         if (nrecs.lt.0) then
            call messerr(val(i))
            print *, '**********************************************'
            print *, '* le fichier #',val(i), 
     *               'n''est pas standard random'
            print *, '**********************************************'
            stop
         endif
      nbrecs = nbrecs + nrecs
      enddo
         
      tol = 6
      ier = fstopi('TOLRNC', tol, flag)
      call fstlnk(lnkdiun, nf)   
      allocate (liste(nrecs))
      ier = fstinl(lnkdiun(1), ni, nj, nk, -1, ' ',-1,-1,-1,' ',' ',
     *             liste, nrecs, nrecs)

      return
      end

c     ****************************************************************
      subroutine recckar(iun, aspect)
      implicit none
      integer iun
      character*(*) aspect

      integer fstinf
      external fstinf
      external wglkas, wglfsc

      integer ni, nj, nk
      integer key

      integer vrai

      vrai = 1
      key = fstinf(iun, ni, nj, nk,  -1, ' ', -1, -1, -1, ' ', ' ')

*     if (aspect.eq.'SQUARE') then
*        call wglkas(1, 1)
*     endif

      print *, 'recckar', aspect
      if (aspect.eq.'NONE') then
         call wglias(vrai)
*        call wglkas(1, 1)
      endif

      if (aspect.eq.'GRID') then
         if (ni.eq.1) then
            call wglkas(nj, nk)
         endif

         if (nj.eq.1) then
            call wglkas(ni, nk)
         endif
         
         if (nk.eq.1) then
            call wglkas(ni, nj)
         endif
      endif

      if (aspect.eq.'FULL') then
         call wglfsc
      endif

      return
      end
c     ****************************************************************


      subroutine recclsf(lnkdiun, nf)
      implicit none

      integer lnkdiun(124)
      integer nf

      integer fclos, fstfrm, fstunl
      external fclos, fstfrm, fstunl

      integer i, ier

      if (nf.eq.0) then
         return
      endif

      ier = fstunl()
      do 10 i=1, nf
         ier = fstfrm(lnkdiun(i))
         ier = fclos(lnkdiun(i))
 10   continue


      return
      end

      
c     ****************************************************************


      subroutine rtnozsrt(filename)
      character *(*) filename

      character * 8   cle(132)
      character * 512 def(132), val(132)

      common /ccardprm/ cle, def, val
!      print *, val(126)
      filename = val(126)
      return
      end

      
c     ****************************************************************

      subroutine allpup

      call xconup
      call xselundim(1)

      return
      end

      
c     ****************************************************************


      subroutine allpdown

      call xcondown
      call xseldim(1)

      return 
      end


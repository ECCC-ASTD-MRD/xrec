.\" Copyright (c) 1993 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Lawrence Livermore National Laboratory and its
.\"	contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.de Hd
.ds Dt \\$4
..
.Hd $Header: /usr/local/src/lic/liblic/RCS/LIC_Convolve.3,v 1.3 1993/10/26 18:25:38 casey Exp $
.TH LIC_CONVOLVE 3 \*(Dt
.SH NAME
LIC_Convolve2D, LIC_Convolve3D \- Line Integral Convolution engines
.SH SYNOPSIS
.nf
#include <lic.h>

.ta \w'LIC *\fBLIC_Convolve2D\fP('u +\w'doubleXXX'u
void \fBLIC_Convolve2D\fP(LIC	*\fIThis\fP,
.ta \w'LIC *\fBLIC_Convolve2D\fP('u +\w'doubleXXX*'u
	int	\fIi\fP,
	int	\fIj\fP,
	int	\fIdirection\fP,
.ta \w'LIC *\fBLIC_Convolve2D\fP('u +\w'doubleXXX'u
	double	*\fIrIntegral\fP,
	double	*\fIgIntegral\fP,
	double	*\fIbIntegral\fP,
	double	*\fIaIntegral\fP,
	double	*\fIKernelArea\fP)
.DT

.ta \w'LIC *\fBLIC_Convolve3D\fP('u +\w'doubleXXX'u
void \fBLIC_Convolve3D\fP(LIC	*\fIThis\fP,
.ta \w'LIC *\fBLIC_Convolve3D\fP('u +\w'doubleXXX*'u
	int	\fIi\fP,
	int	\fIj\fP,
	int	\fIk\fP,
	int	\fIdirection\fP,
.ta \w'LIC *\fBLIC_Convolve3D\fP('u +\w'doubleXXX'u
	double	*\fIrIntegral\fP,
	double	*\fIgIntegral\fP,
	double	*\fIbIntegral\fP,
	double	*\fIaIntegral\fP,
	double	*\fIKernelArea\fP)
.DT
.fi
.SH DESCRIPTION
.B LIC_Convolve2D
and
.B LIC_Convolve3D
perform the Line Integral Convolution algorithm for two and three dimensions,
respectively.
.IR i ,
.I j
and
.I k
represent the position within the vector field to image.  They are
zero-based indexes referencing columns, rows and planes, respectively.
(Note that this is the opposite of traditional usage of \*(lq\fBi\fP\*(rq
and \*(lq\fBj\fP\*(rq in matrix coordinates.)
.PP
.I direction
controls whether the LIC follows the vector field foreward along vector
field lines,
.BR LIC_FOREWARD ,
or backward along the negative of vector field lines,
.BR LIC_BACKWARD .
.PP
.IR rIntegral ,
.IR gIntegral ,
.I bIntegral
and
.I aIntegral
are value return parameters.  On return from the convolution routine, they
will hold the red, green, blue and alpha LIC sums, respectively.  These
sums represent the convolution of the LIC filter,
.IR k(s) ,
with the pixel values,
.IR F(s) ,
along the LIC path.
.PP
.I KernelArea
is a value return parameter.  On return from the convolution routine,
it will hold the area (integral) of the filter kernel for the
convolution.  For variable normalization (see
.BR LIC_Create )
only the area under the portion of the filter kernel actually used in
the convolution will be returned.  For fixed normalization the area
returned will be for the entire filter kernel corresponding to
.IR direction .
These will differ when the LIC path is prematurely terminated due to a vector
field singularity or running off the edge of the vector field.
.SH "SEE ALSO"
.BR LIC (3),
.BR LIC_ComputeImage (3)
.SH BUGS
If
.IR i ,
.I j
or
.I k
are out of range (less than 0 or greater than or equal to their corresponding
dimension size), the most likely outcome will be a segmentation fault.  This
should probably be fixed ...
.SH STANDARDS
This is unsupported, non-standard software.  It is not the subject of any
standards effort.

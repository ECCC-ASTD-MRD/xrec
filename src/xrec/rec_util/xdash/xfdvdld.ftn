*/* RMNLIB - Library of useful routines for C and FORTRAN programming
* * Copyright (C) 1975-2001  Division de Recherche en Prevision Numerique
* *                          Environnement Canada
* *
* * This library is free software; you can redistribute it and/or
* * modify it under the terms of the GNU Lesser General Public
* * License as published by the Free Software Foundation,
* * version 2.1 of the License.
* *
* * This library is distributed in the hope that it will be useful,
* * but WITHOUT ANY WARRANTY; without even the implied warranty of
* * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* * Lesser General Public License for more details.
* *
* * You should have received a copy of the GNU Lesser General Public
* * License along with this library; if not, write to the
* * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
* * Boston, MA 02111-1307, USA.
* */
      SUBROUTINE XFDVDLD (IENTRY,IIX,IIY)
*
* SOFTWARE DASHED LINE PACKAGE WITH CHARACTER CAPABILITY AND SMOOTHING
*
*
* LATEST REVISION        FEBRUARY,1977
*
* PURPOSE                DASHSMTH IS A SOFTWARE DASHED LINE PACKAGE WITH
*                        SMOOTHING CAPABILITIES.  DASHSMTH IS DASHCHAR
*                        WITH SMOOTHING FEATURES ADDED.
*
* ACCESS CARDS           *FORTRAN,S=ULIB,N=DASHSMTH
*                        *COSY
*
* USAGE                  FIRST,
*                             CALL DASHD (IPAT,NC,JCRT,JSIZE)
*                        THEN, CALL THE FOLLOWING:
*                            CALL CURVED (X,Y,N)
*                        OR,
*                            CALL FRSTD (X,Y)
*                            CALL VECTD (X,Y)
*                            CALL LASTD
*                        FRSTD PROCESSES THE FIRST POINT OF A LINE.
*                        VECTD IS CALLED FOR THE REMAINING POINTS OF A
*                        LINE.  LASTD IS CALLED ONLY AFTER THE LAST
*                        POINT OF A LINE HAS BEEN PROCESSED IN VECTD.
*
*                        THE FOLLOWING MAY ALSO BE CALLED, BUT NO
*                        SMOOTHING WILL RESULT:
*                            CALL LINED (XA,YA,XB,YB)
*
* ARGUMENTS              EXCEPT FOR DASHD , ALL ARGUMENTS
*                        MATCH THOSE IN THE CORRESPONDING ROUTINE IN
*                        THE SYSTEM PLOT PACKAGE.  SEE NCAR LIBRARY
*                        ROUTINES MANUAL, CHAPTER 5 FOR EXPLANATION
*                        OF THE ARGUMENTS.
*                                           SYSTEM                NCAR
*                        DASHSMTH PACKAGE   PLOT PACKAGE          LRM
*                        -----------------  -----------------   ----
*                        CURVED (X,Y,N)     CURVE (X,Y,N)         5.13
*                        FRSTD (X,Y)        FRSTPT (X,Y)          5.12
*                        VECTD (X,Y)        VECTOR (X,Y)          5.12
*                        LINED (XA,YA,XB,   LINE (XA,YA,XB,       5.13
*                               YB)               YB)
*                        WHEREVER THE SYSTEM PLOT PACKAGE ALLOWS
*                        EITHER FIXED OR FLOATING POINT ARGUMENTS,
*                        THE SOFTWARE DASHED LINE PACKAGE DOES ALSO.
*
* ON INPUT               IPAT
* FOR DASHD                A DASH LINE PATTERN THAT MAY BE DEFINED
*                          IN ONE OF TWO WAYS:
*                          . IF IPAT IS AN INTEGER IN THE RANGE
*                            0-177777B THE LAST 3 ARGUMENTS ARE
*                            NEITHER NEEDED NOR USED.  THESE 16 BITS
*                            ARE TREATED AS A CODE FOR SOLID OR GAP
*                            WITH A ONE BIT AS 3 PLOTTER ADDRESS UNITS
*                            SOLID AND A ZERO BIT AS 3 PLOTTER ADDRESS
*                            UNITS OF GAP.  THUS, FOR EXAMPLE,
*                            THE PATTERN 147000B = 1100111000000000
*                            MEANS 6 ON, 6 OFF, 9 ON, 27 OFF ETC.
*                          . IF IPAT IS NOT OF THE FORM ABOVE, IT IS
*                            ASSUMED TO BE A HOLLERITH STRING , NC
*                            CHARACTERS LONG.  NC MAY BE ANY NUMBER,
*                            ALTHOUGH ABOUT 60 SEEMS TO BE A
*                            PRACTICAL LIMIT.  A SOLID IS INDICATED
*                            BY A $.  A GAP IS INDICATED BY A QUOTE
*                            (QUOTE = 8,4 PUNCH ON THE KEYPUNCH,
*                            " WHEN PRINTED).  BLANKS ARE IGNORED.
*                            ANY OTHER HOLLERITH CHARACTERS BECOME
*                            PART OF THE PATTERN WITH A HOLE OF
*                            APPROPRIATE LENGTH BEING LEFT IN THE
*                            LINE FOR THE CHARACTER STRING.  NO
*                            SINGLE HOLLERITH STRING TO BE PRINTED
*                            AS SUCH MAY BE LONGER THAN
*                            15 CHARACTERS.
*                          . ON 16 BIT MACHINES THE FIRST BIT TO THE
*                            LEFT ALWAYS HAS TO BE SET TO ONE, IF IPAT
*                            IS TO REPRESENT AN OCTAL PATTERN. THIS DOES
*                            NOT RESTRICT THE POSSIBLE PATTERNS AT ALL,
*                            SINCE EACH PATTERN CAN BE REARRANGED IN
*                            SUCH A WAY, THAT THE FIRST BIT IS 1.
*                          . USERS , WHO ARE CONCERNED ABOUT THE
*                            PORTABILITY OF THEIR PROGRAMS, SHOULD
*                            ALWAYS CALL  DASHD WITH 4 PARAMETERS.
*                            (SUPPLY DUMMY PARAMETERS)
*
*                        NC
*                          THE NUMBER OF CHARACTERS IN IPAT.
*
*                        JCRT
*                          THE LENGTH IN PLOTTER ADDRESS UNITS PER
*                          $ OR QUOTE.
*
*                        JSIZE
*                          IS THE SIZE OF THE PWRI CHARACTER.
*                          . IF BETWEEN 0 AND 3 , IT IS 1., 1.5, 2.
*                            AND 3. TIMES THE 8 PLOTTER ADDRESS UNIT
*                            WIDTH.
*                          . IF GREATER THAN 3, IT IS THE CHARACTER
*                            WIDTH IN CRT UNITS.
*
*
* ON OUTPUT              ALL ARGUMENTS ARE UNCHANGED FOR ALL ROUTINES.
*
* NOTE                   WHEN USING FRSTD AND VECTD, LASTD MUST BE
*                        CALLED (NO ARGUMENTS NEEDED).  LASTD SETS UP
*                        THE CALLS TO THE SMOOTHING ROUTINES KURV1S AND
*                        KURV2S.
*
* ENTRY POINTS           DASHD, CURVED, FRSTD, VECTD, LINED,
*                        LASTD, KURV1S, KURV2S, CFVLD, FDVDLD,
*                        DASHBD
*
* COMMON BLOCKS          DASHD1    315 (OCTAL)
*                        DASHD2     1
*                        DSAVE1     13  (OCTAL)
*                        DSAVE2     2
*
* I/O                    PLOTS SOLID OR DASHED LINES, POSSIBLY WITH
*                        CHARACTERS AT INTERVALS IN THE LINE.
*                        THE LINES MAY ALSO BE SMOOTHED.
*
* PRECISION              SINGLE
*
* REQUIRED ULIB          NONE
* ROUTINES
*
* SPECIALIST             THOMAS WRIGHT, NCAR, BOULDER, COLORADO  80307
*
* LANGUAGE               FORTRAN
*
* HISTORY                WRITTEN IN OCTOBER 1973,
*                        STANDARDIZED OCTOBER, 1973.
*                        ALL THE DASHED-LINE PACKAGES WERE MERGED INTO
*                        ONE MASTER FILE BY VIRGINIA KALLAL ENDING IN
*                        JUNE, 1976.
*                        MADE PORTABLE IN FEBRUARY 1977 BY ROBERT
*                        UBELMESSER FOR USE ON ALL COMPUTER SYSTEMS WHIC
*                        SUPPORT PLOTTERS WITH UP TO 15 BIT RESOLUTION.
*                        THE ROUTINES OF THE 1976 SYSTEM PLOT PACKAGE
*                        WERE USED.
*
* ALGORITHM              THE NAMES OF THE DASHCHAR ROUTINES HAVE BEEN
*                        CHANGED AND THE SMOOTHING ROUTINES HAVE THE
*                        NAMES PREVIOUSLY FOUND IN DASHCHAR ROUTINES.
*                        THIS IS DONE SO THAT THE USER CAN ACCESS
*                        DASHSMTH WITHOUT CHANGING THE DRIVER PROGRAM
*                        WHICH HAD PREVIOUSLY BEEN SET UP TO ACCESS THE
*                        ROUTINES IN DASHCHAR.  POINTS FOR EACH LINE
*                        SEGMENT ARE PROCESSED AND PASSED TO THE
*                        ROUTINES, KURV1S AND KURV2S, WHICH COMPUTE
*                        SPLINES UNDER TENSION PASSING THROUGH THESE
*                        POINTS.  NEW POINTS ARE GENERATED BETWEEN THE
*                        GIVEN POINTS, RESULTING IN SMOOTH LINES.
*
* SPACE REQUIRED         ABOUT 4600 (OCTAL)
*
* ACCURACY               + OR - .5 PLOTTER ADDRESS UNITS PER CALL.
*                        THERE IS NO CUMULATIVE ERROR.
*
* TIMING                 ABOUT THREE TIMES AS LONG AS DASHCHAR.
*
* PORTABILITY            DO NOT PORT THE ULIB FILES, AS THIS RESULTS IN
*                        MUCH EXTRA WORK.  CONTACT THE SPECIALIST.
*
* PLOTTING ROUTINES      OPTN, PLOTIT, FL2INT, PWRI, GETSI
* USED
*
* REQUIRED RESIDENT      SQRT, ATAN2, SIN, COS, EXP
* ROUTINES
*
* INTERNAL PARAMETERS    NAME   DEFAULT  FUNCTION
*                        ----   -------  --------
*
*                        IPAU       3    NUMBER OF PLOTTER ADDRESSES PER
*                                        ELEMENT (BIT) IN THE DASH
*                                        PATTERN WHEN LE 177777B.
*                                        THUS, THE PATTERN IS
*                                        REPEATED EVERY IPAU*16 PLOTTER
*                                        ADDRESS UNITS.
*
*                        FPART     1.    MULTIPLYING FACTOR FOR
*                                        FIRST SOLID LINE SEGMENT.
*                                        THIS CAN BE USED TO OFF-SET
*                                        LABELS.  FOR EXAMPLE, IF
*                                        FPART = .5, THE FIRST SOLID
*                                        LINE SEGMENT IS ONLY
*                                        ONE-HALF AS LONG AS IT IS
*                                        THE REST OF THE TIME.  THIS
*                                        MOVES ALL LABELS ON THIS
*                                        LINE TOWARDS THE BEGINNING,
*                                        WHICH REDUCES THE
*                                        PROBABILITY OF THE LABEL
*                                        BEING WRITTEN ON TOP OF A
*                                        LABEL OF A NEARBY LINE
*                                        DRAWN WITH FPART = 1.
*
*                       IGP         9    FLAG TO CONTROL WHETHER A GAP
*                                        IS LEFT FOR CHARACTERS WHEN
*                                        PLOTTING.
*                                          = 18 GAP, NO EXTRA SPACE
*                                          = 9  GAP IS LEFT WITH EXTRA SPACE ARO
*                                          = 0  NO GAP IS LEFT.
*
*                        IOFFS     0     FLAG TO TURN ON SMOOTHING CODE.
*                                          = 0  SMOOTHING.
*                                          = 1  NO SMOOTHING.
*
*                        TENSN    2.5    TENSION FACTOR.  MUST BE
*                                        GREATER THAN 0.  A LARGE
*                                        TENSION FACTOR (30.) WOULD
*                                        ESSENTIALLY TURN OFF SMOOTHING.
*
*                        NP       150    TWICE THE MAXIMUM NUMBER OF
*                                        INTERPOLATED POINTS ON A
*                                        HORIZONTAL LINE WITH LENGTH
*                                        EQUAL TO THAT OF THE GRID.
*                                        MORE POINTS PER UNIT LENGTH ARE
*                                        INTERPOLATED FOR SHORT LINES
*                                        THAN FOR LONG LINES.
*
*                        SMALL   128.    THE MINIMUM DISTANCE IN PLOTTER
*                                        ADDRESS UNITS BETWEEN POINTS
*                                        WHICH ARE SAVED.  WHEN THE
*                                        POINTS ON A LINE ARE BEING
*                                        PROCESSED, AND TWO OR MORE
*                                        CONSECUTIVE POINTS ARE LESS
*                                        THAN 128 PLOTTER ADDRESS UNITS
*                                        APART, ONLY THE FIRST
*                                        ONE OF THESE CONSECUTIVE POINTS
*                                        IS SAVED.  THIS PROCEDURE IS TO
*                                        PREVENT CUSPS.
*
*                        L1        70    THE MAXIMUM NUMBER OF POINTS
*                                        SAVED AT ONE TIME.  IF THERE
*                                        ARE MORE THAN 70 POINTS ON A
*                                        GIVEN LINE, 70 POINTS ARE
*                                        PROCESSED, THEN THE NEXT 70,
*                                        UNTIL THE ENTIRE LINE IS
*                                        PROCESSED.  SMOOTHNESS BETWEEN
*                                        SEGMENTS IS MAINTAINED
*                                        AUTOMATICALLY.  IF L1 IS
*                                        INCREASED, THE DIMENSIONS OF
*                                        XSAVE, YSAVE, XP, YP, AND TEMP
*                                        IN FDVDLD MUST BE INCREASED TO
*                                        THE NEW VALUE OF L1.
*
*
*
************************************************************************
*
* IMPLEMENTATION INSTRUCTIONS
*
* 1.  CHECK THE GRAPHICS INTERFACE. THIS DASHED LINE PACKAGE USES THE
*     NCAR SYSTEM PLOT PACKAGE ROUTINES LISTED ABOVE.
*
* 2.  SUPPLY THREE MACHINE DEPENDENT FUNCTION SUBPROGRAMS FOR BIT
*     MANIPULATIONS.
*
*     ISHIFT(I1,I2) THIS INTEGER VALUED FUNCTION RETURNS THE RESULT
*                   OF SHIFTING I1 TO THE LEFT BY I2 PLACES IF I2 IS
*                   POSITIVE AND TO THE RIGHT IF I2 IS NEGATIVE.
*                   THIS SHIFT SHOULD PRESERVE THE NATURE OF NEGATIVE
*                   NUMBERS -- ISHIFT(-4,-1) SHOULD EQUAL -2.
*
*     IOR(I1,I2)    THIS INTEGER VALUED FUNCTION RETURNS THE BIT BY
*                   BIT LOGICAL SUM OF THE TWO ARGUMENTS. THAT IS, FOR
*                   EACH BIT POSITION IN THE WORD, IOR=0 IF AND ONLY IF
*                   BOTH I1=0 AND I2=0.
*
*     IAND(I1,I2)   THIS INTEGER VALUED FUNCTION RETURNS THE BIT BY BIT
*                   LOGICAL PRODUCT OF THE TWO ARGUMENTS. THAT IS, FOR
*                   EACH BIT POSITION IN THE WORD, IAND=1 IF AND ONLY
*                   IF BOTH I1=1 AND I2=1.
*
*     SUPPLY THE SUBROUTINE ULIBER (IERR,MESS,LMESS) TO PRINT ERROR
*     MESSAGES. ITS SPECIFICATIONS ARE DESCRIBED IN PART 2 OF THE NCAR
*     SYSTEM PLOT PACKAGE MANUAL ("REQUIRED LOCALLY IMPLEMENTED
*     SUPPORT ROUTINES").
*
*     THESE SUBPROGRAMS CAN BE THE SAME ROUTINES USED TO IMPLEMENT THE
*     NCAR SYSTEM PLOT PACKAGE. THUS THEY ARE GENERALLY ALREADY PRESENT
*     IN MOST IMPLEMENTATIONS OF THE NCAR SYSTEM PLOT PACKAGE.
*
* 3.  SUPPLY THE SUBROUTINE GETCHR (ICHARS,LEN,N,IRESLT)
*     WHICH RETURNS CHARACTER NUMBER N FROM CHARACTER STRING ICHARS.
*     ICHARS IS LEN CHARACTERS LONG. THE CHARACTER REPRESENTATION IS
*     RETURNED RIGHT JUSTIFIED IN IRESLT WITH ZERO FILL.
*
*     SUPPLY ALSO THE SUBROUTINE SETCHR (ISTRIN,LEN,N,ICHAR)
*     WHICH INSERTS CHARACTER ICHAR INTO THE N"TH POSITION IN CHARACTER
*     STRING ISTRIN. ISTRIN IS AT MOST LEN CHARACTERS LONG.
*
*     SETCHR AND GETCHR HAVE TO BE COMPATIBLE WITH EACH OTHER.
*     THEY ARE DESCRIBED IN THE NCAR GRAPHICS MANUAL.
*
* 4.  SET MACHINE DEPENDENT CONSTANTS  IN DATA STATAMENTS IN SUBROUTINE
*     DASHD. THERE ARE 2 CONSTANTS TO BE SET -- NBCHR AND NBWD.
*     THEY ARE DESCRIBED IN COMMENTS PRECEEDING THE DATA STATEMENTS.
*
* END OF IMPLEMENTATION INTRUCTIONS
************************************************************************
*
*     implicit none
*
      DIMENSION       XSAVE(70)  ,YSAVE(70)  ,XP(70)     ,YP(70)     ,
     1                TEMP(70)
*
#if defined (SUN) || defined (SGI) || defined (NEC)
      SAVE
#endif
*
* INTERNAL PARAMETERS.
*
#include "xdashd2.cdk"
*
* OTHER CONSTANTS.
*
      DATA IFSTFL /1/
      DATA IFLAG /0/
      DATA PI /3.14159265358/
      DATA IDUMMY /0/
*
*
      GO TO (10,15,35),IENTRY
*
* ENTRY  FRSTD (XX,YY)
*
   10 DEG = 180./PI
*
      MX = IIX
      MY = IIY
      IFSTFL = 0
      SSLP1 = 0.0
      SSLPN = 0.0
      XSVN = 0.0
      YSVN = 0.0
      IF (IOFFS .GE. 1) CALL XCFVLD (1,MX,MY)
      IF (IOFFS .GE. 1) RETURN
*
* INITIALIZE THE POINT AND SEGMENT COUNTER
* N COUNTS THE NUMBER OF POINTS/SEGMENT
*
      N = 0
*
* NSEG = 0       FIRST SEGMENT
* NSEG = 1       MORE THAN ONE SEGMENT
*
      NSEG = 0
*
* SAVE THE X,Y COORDINATES OF THE FIRST POINT
* XSV1           CONTAINS THE X COORDINATE OF THE FIRST POINT
*                OF A LINE
* YSV1           CONTAINS THE Y COORDINATE OF THE FIRST POINT
*                OF A LINE
*
      XSV1 = MX
      YSV1 = MY
      GO TO 30
*
*     ENTRY VECTD (XX,YY)
*
   15 CONTINUE
*
* TEST FOR PREVIOUS FRSTD CALL
*
      IF (IFSTFL .EQ. 0) GO TO 20
*
* INFORM USER - NO PREVIOUS CALL TO FRSTD. TREAT CALL AS FRSTD CALL.
*
      CALL XULIBER(0,' VECTD - VECTD CALL OCCURS BEFORE A CALL TO FRSTD.
     1 IT IS TREATED AS A FRSTD CALL.',82)
      GO TO 10
   20 MX = IIX
      MY = IIY
*
* VECTD          SAVES THE X,Y COORDINATES OF THE ACCEPTED
*                POINTS ON A LINE SEGMENT
*
      IF (IOFFS .GE. 1) CALL XCFVLD (2,MX,MY)
      IF (IOFFS .GE. 1) RETURN
*
* IF THE NEW POINT IS TOO CLOSE TO THE PREVIOUS POINT, IGNORE IT
*
      IF (ABS(FLOAT(IFIX(XSVN)-MX))+ABS(FLOAT(IFIX(YSVN)-MY)) .LT.
     1    SMALL) RETURN
      IFLAG = 0
   30 N = N+1
*
* SAVE THE X,Y COORDINATES OF EACH POINT OF THE SEGMENT
* XSAVE          THE ARRAY OF X COORDINATES OF LINE SEGMENT
* YSAVE          THE ARRAY OF Y COORDINATES OF LINE SEGMENT
*
      XSAVE(N) = MX
      YSAVE(N) = MY
      XSVN = XSAVE(N)
      YSVN = YSAVE(N)
      IF (N .GE. L1-1) GO TO 40
      RETURN
*
*     ENTRY LASTD
*
   35 CONTINUE
      IF (IFSTFL .NE. 0) RETURN
      IFSTFL = 1
*
* LASTD          CHECKS FOR PERIODIC LINES AND SETS UP
*                  THE CALLS TO KURV1S AND KURV2S
*
      IF (IOFFS .GE. 1) CALL XCFVLD (3,IDUMMY,IDUMMY)
      IF (IOFFS .GE. 1) RETURN
*
* IFLAG = 0      OK TO CALL LASTD DIRECTLY
* IFLAG = 1      LASTD WAS JUST CALLED FROM BY VECTD
*                IGNORE CALL TO LASTD
*
      IF (IFLAG .EQ. 1) RETURN
*
* COMPARE THE LAST POINT OF SEGMENT WITH FIRST POINT OF LINE
*
   40 IFLAG = 1
*
* IPRD = 0       PERIODIC LINE
* IPRD = 1       NON-PERIODIC LINE
*
      IPRD = 1
      IF (ABS(XSV1-XSVN)+ABS(YSV1-YSVN) .LT. SMALL) IPRD = 0
*
* TAKE CARE OF THE CASE OF ONLY TWO DISTINCT P0INTS ON A LINE
*
      IF (NSEG .GE. 1) GO TO 60
      IF (N-2) 150,140,50
   50 IF (N .GE. 4) GO TO 60
*
      IF (IPRD .NE. 0) GO TO 60
      DX = XSAVE(2)-XSAVE(1)
      DY = YSAVE(2)-YSAVE(1)
      SLOPE = ATAN2(DY,DX)*DEG+90.
      IF (SLOPE .GE. 360.) SLOPE = SLOPE-360.
      IF (SLOPE .LE. 0.) SLOPE = SLOPE+360.
      SLP1 = SLOPE
      SLPN = SLOPE
      ISLPSW = 0
      SIGMA = TENSN
      GO TO 100
   60 SIGMA = TENSN
      IF (IPRD .GE. 1) GO TO 80
      IF (NSEG .GE. 1) GO TO 70
*
* SET UP FLAGS FOR A  1  SEGMENT, PERIODIC LINE
*
      ISLPSW = 4
      XSAVE(N) = XSV1
      YSAVE(N) = YSV1
      GO TO 100
*
* SET UP FLAGS FOR AN N-SEGMENT, PERIODIC LINE
*
   70 SLP1 = SSLPN
      SLPN = SSLP1
      ISLPSW = 0
      GO TO 100
   80 IF (NSEG .GE. 1) GO TO 90
*
* SET UP FLAGS FOR THE 1ST SEGMENT OF A NON-PERIODIC LINE
*
      ISLPSW = 3
      GO TO 100
*
* SET UP FLAGS FOR THE NTH SEGMENT OF A NON-PERIODIC LINE
*
   90 SLP1 = SSLPN
      ISLPSW = 1
*
* CALL THE SMOOTHING ROUTINES
*
  100 CALL XKURV1S (N,XSAVE,YSAVE,SLP1,SLPN,XP,YP,TEMP,S,SIGMA,ISLPSW)
*
* DETERMINE THE NUMBER OF POINTS TO INTERPOLATE FOR EACH SEGMENT
*
      IF (NSEG.GE.1 .AND. N.LT.L1-1) GO TO 110
      NPRIME = FLOAT(NP)-(S*FLOAT(NP)*.5)/32767.
      IF (S .GE. 32767.) NPRIME = .5*FLOAT(NP)
      NPL = AMAX1(FLOAT(NPRIME)*S/32767.,2.5)
  110 DT = 1./FLOAT(NPL)
      IX = IFIX (XSAVE(1))
      IY = IFIX (YSAVE(1))
      IF (NSEG .LE. 0) GO TO 112
      CALL XPLOTIT (IX,IY,0)
      GO TO 114
  112 CONTINUE
      CALL XCFVLD (1,IX,IY)
  114 CONTINUE
      T = 0.0
      NSLPSW = 1
      IF (NSEG .GE. 1) NSLPSW = 0
      NSEG = 1
      CALL XKURV2S (T,XS,YS,N,XSAVE,YSAVE,XP,YP,S,SIGMA,NSLPSW,SLP)
*
* SAVE SLOPE AT THE FIRST POINT OF THE LINE
*
      IF (NSLPSW .GE. 1) SSLP1 = SLP
      NSLPSW = 0
      DO 120 I=1,NPL
         T = T+DT
         TT = -T
         IF (I .EQ. NPL) NSLPSW = 1
         CALL XKURV2S (TT,XS,YS,N,XSAVE,YSAVE,XP,YP,S,SIGMA,NSLPSW,SLP)
*
* SAVE THE LAST SLOPE OF THIS LINE SEGMENT
*
         IF (NSLPSW .GE. 1) SSLPN = SLP
*
* DRAW EACH PART OF THE LINE SEGMENT
*
         IX = IFIX(XS)
         IY = IFIX (YS)
         CALL XCFVLD (2,IX,IY)
  120 CONTINUE
      IF (IPRD .NE. 0) GO TO 130
*
* CONNECT THE LAST POINT WITH THE FIRST POINT OF A PERIODIC LINE
*
      IX = IFIX (XSV1)
      IY = IFIX (YSV1)
      CALL XCFVLD (2,IX,IY)
*
* BEGIN THE NEXT LINE SEGMENT WITH THE LAST POINT OF THIS SEGMENT
*
  130 XSAVE(1) = XS
      YSAVE(1) = YS
      N = 1
      IF (IFSTFL .EQ. 1) CALL XCFVLD (3,IDUMMY,IDUMMY)
      GO TO 150
  140 IX = IFIX (XSAVE(1))
      IY = IFIX (YSAVE(1))
      CALL XCFVLD (1,IX,IY)
      IX = IFIX (XSAVE(N))
      IY = IFIX (YSAVE(N))
      CALL XCFVLD (2,IX,IY)
      IF (IFSTFL .EQ. 1) CALL XCFVLD (3,IDUMMY,IDUMMY)
  150 CONTINUE
      RETURN
      ENTRY XDASHS
      IOFFS = 0
      RETURN
      ENTRY XDASHN
      IOFFS=1
      RETURN
      END
